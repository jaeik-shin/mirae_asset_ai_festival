# main.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from modules.rag_engine import initialize_rag_qa
from scipy.optimize import minimize
from itertools import combinations


# ==========================
# Ìï®Ïàò Ï†ïÏùò
# =====================

def cosine_loss(weights, vectors, target_vector):
    combined = np.average(vectors, axis=0, weights=weights).reshape(1, -1)
    sim = cosine_similarity(combined, target_vector.reshape(1, -1))[0][0]
    return 1 - sim

def recommend_best_etf_combo(etf_dict, portfolio_vector, min_k=1, max_k=4):
    best_score = float('inf')
    best_combo = None
    best_weights = None

    etf_names = list(etf_dict.keys())
    for k in range(min_k, max_k + 1):
        for combo in combinations(etf_names, k):
            vectors = np.array([etf_dict[etf] for etf in combo])
            init_weights = np.ones(k) / k
            bounds = [(0, 1)] * k
            constraints = {'type': 'eq', 'fun': lambda w: np.sum(w) - 1}

            result = minimize(
                cosine_loss,
                init_weights,
                args=(vectors, portfolio_vector),
                bounds=bounds,
                constraints=constraints,
                method='SLSQP',
                options={'maxiter': 200}
            )

            if result.success and result.fun < best_score:
                best_score = result.fun
                best_combo = combo
                best_weights = result.x

    if best_combo is None:
        raise RuntimeError("ÏµúÏ†ÅÌôî Ïã§Ìå®")

    return best_combo, best_weights, 1 - best_score

def process_customer(customer_id, df_portfolios, stock_vector_dict, etf_vector, top_n=20):
    customer_data = df_portfolios[df_portfolios['customer_id'] == customer_id]
    total_value = customer_data['invested_value'].sum()

    st.subheader(f"üë§ Í≥†Í∞ù ID: {customer_id}")
    st.markdown("### üìä Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ")
    for _, row in customer_data.iterrows():
        stock = row['stock_name']
        value = row['invested_value']
        pct = value / total_value * 100
        st.write(f"- {stock}: {value:,.0f}Ïõê ({pct:.1f}%)")

    portfolio_vec = np.zeros(len(next(iter(stock_vector_dict.values()))), dtype=float)
    for _, row in customer_data.iterrows():
        stock = row['stock_name']
        val = row['invested_value']
        if stock not in stock_vector_dict:
            st.warning(f"‚ö†Ô∏è '{stock}'Îäî Î≤°ÌÑ∞Ïóê ÏóÜÏùå ‚Üí Î¨¥Ïãú")
            continue
        vec_data = stock_vector_dict[stock]
        if isinstance(vec_data, dict):
           vec = np.array(list(vec_data.values()), dtype=float)
        else:
           vec = np.array(vec_data, dtype=float)

        portfolio_vec += vec * (val / total_value)


    etf_dict_all = {
        row['ETF_Name']: np.array(row.drop('ETF_Name').values, dtype=float)
        for _, row in etf_vector.iterrows()
    }

    etf_sims = []
    for name, vec in etf_dict_all.items():
        sim = cosine_similarity([vec], [portfolio_vec])[0][0]
        etf_sims.append((name, sim))

    etf_sims.sort(key=lambda x: x[1], reverse=True)
    top_etf_names = [name for name, _ in etf_sims[:top_n]]
    etf_dict = {name: etf_dict_all[name] for name in top_etf_names}

    best_combo, best_weights, best_sim = recommend_best_etf_combo(etf_dict, portfolio_vec)

    st.markdown("### ‚úÖ ÏµúÏ†Å Ï∂îÏ≤ú ETF Ï°∞Ìï©")
    for etf in best_combo:
        st.write(f"- {etf}")

    st.markdown("### üìà Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÎÇ¥ ETF ÎπÑÏ§ë")
    for etf, w in zip(best_combo, best_weights):
        st.write(f"{etf}: {w:.4f}")

    st.markdown(f"### üîó Ïú†ÏÇ¨ÎèÑ Ï†êÏàò (Cosine Similarity): `{best_sim:.4f}`")


    return best_combo, best_weights, portfolio_vec


# =====================
# Streamlit Ïï± ÏãúÏûë
# =====================

st.title("üìà Í≥†Í∞ùÎ≥Ñ ETF Ï∂îÏ≤ú ÏãúÏä§ÌÖú")

# Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
df_customer = pd.read_csv("data/df_customer.csv")
df_vector = pd.read_csv("data/df_vector.csv")
etf_vector = pd.read_csv("data/etf_vector.csv")

# Î≤°ÌÑ∞ ÎîïÏÖîÎÑàÎ¶¨
stock_vector_dict = df_vector.set_index('Name').to_dict(orient='index')


# Í≥†Í∞ù ÏÑ†ÌÉù
customer_ids = df_customer['customer_id'].unique()
selected_customer = st.selectbox("Í≥†Í∞ùÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", customer_ids)

if st.button("Î∂ÑÏÑù Ïã§Ìñâ"):
    best_combo, best_weights, _ = process_customer(
        selected_customer, df_customer, stock_vector_dict, etf_vector, top_n=20
    )

    st.markdown("---")
    st.markdown("### ü§ñ Ï∂îÏ≤ú ETF Ìï¥ÏÑ§ (Powered by Clova X)")

    qa = initialize_rag_qa(folder_path="data", persist_dir="etf")

    etf_combo_str = ", ".join(
        [f"{etf} (ÎπÑÏ§ë: {weight*100:.1f}%)" for etf, weight in zip(best_combo, best_weights)]
    )

    customer_data = df_customer[df_customer['customer_id'] == selected_customer]
    total_value = customer_data['invested_value'].sum()
    user_stock_str = ", ".join([
        f"{row['stock_name']} (ÎπÑÏ§ë: {row['invested_value'] / total_value * 100:.1f}%)"
        for _, row in customer_data.iterrows()
    ])

    query = (
    "Îã§ÏùåÏùÄ ÏÇ¨Ïö©ÏûêÏùò Ï£ºÏãù Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î∞è Ï∂îÏ≤ú ETF Ï†ïÎ≥¥ÏûÖÎãàÎã§.\n\n"
    "1. **ÏÇ¨Ïö©Ïûê Ï£ºÏãù Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Íµ¨ÏÑ±**\n"
    f"- Î≥¥Ïú† Ï¢ÖÎ™© Î∞è ÎπÑÏ§ë: {user_stock_str}\n\n"
    "2. **Ï∂îÏ≤ú ETF Ï°∞Ìï©**\n"
    f"- Ï∂îÏ≤ú ETF Î∞è ÎπÑÏ§ë: {etf_combo_str}\n\n"
    "3. **ÏöîÏ≤≠ÏÇ¨Ìï≠**\n"
    "- ÏúÑÏùò ÏÇ¨Ïö©Ïûê Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Î•º Í∏∞Î∞òÏúºÎ°ú Ìï¥Îãπ ETF Ï°∞Ìï©ÏùÑ Ï∂îÏ≤úÌïú Ïù¥Ïú†Î•º ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.\n"
    "- ÏïÑÎûò ÌòïÏãùÏùÑ Îî∞Îùº ETF 4Í∞úÎ•º Í∞ÅÍ∞Å Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî:\n"
    "  1. ETF Ïù¥Î¶Ñ\n"
    "  2. Ï£ºÏöî Ìé∏ÏûÖ Ï¢ÖÎ™© Î∞è ÏÑπÌÑ∞\n"
    "  3. ETFÏùò ÌÖåÎßà ÎòêÎäî Ï†ÑÎûµ\n"
    "  4. Ìï¥Îãπ ETFÏùò ÏµúÍ∑º ÏãúÏû• ÏÉÅÌô© ÎòêÎäî ÏàòÏùµÎ•† (Í∞ÄÎä•ÌïòÎã§Î©¥)\n"
    "- ÎßàÏßÄÎßâÏúºÎ°ú, Ï∂îÏ≤úÎêú Í∞Å ETFÍ∞Ä ÏÇ¨Ïö©ÏûêÏùò Í∏∞Ï°¥ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ÏôÄ Ïñ¥Îñ§ **ÌÖåÎßà, ÏóÖÏ¢Ö, Ïä§ÌÉÄÏùº Îì±ÏóêÏÑú Ïú†ÏÇ¨ÏÑ±**ÏùÑ Í∞ÄÏßÄÎäîÏßÄ, ÎòêÎäî **Î≥¥ÏôÑÏ†ÅÏù∏ÏßÄ** ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî. \n"
    "- Ïù¥ Î∂ÑÏÑùÏùÄ **Ïô∏Î∂Ä Îç∞Ïù¥ÌÑ∞ÏôÄ ÎÇ¥Ïû•Îêú DB Í≤ÄÏÉâ Í∏∞Î∞òÏúºÎ°ú** ÏûêÏÑ∏ÌïòÍ≥† ÌòÑÏã§Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.\n\n"
    "**ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú ÏÇ¨Ïö©ÏûêÏùò Í∏∞Ï°¥ Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ÏôÄ Ï∂îÏ≤ú ETF Ï°∞Ìï©Ïù¥ Ïñ¥Îñ§ Ï†êÏóêÏÑú Ïûò Ïñ¥Ïö∏Î¶¨ÎäîÏßÄ, Ïñ¥Îñ§ Ìà¨Ïûê Ï†ÑÎûµÏùÑ ÏúÑÌïú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§Ïù∏ÏßÄ ÏöîÏïΩÌï¥Ï£ºÏÑ∏Ïöî.**"
    )

    try:
        result = qa({"query": query})
        st.markdown("### üß† RAG Í∏∞Î∞ò ETF Ï∂îÏ≤ú Ìï¥ÏÑ§")
        st.success(result["result"])
    except Exception as e:
        st.error(f"RAG ÏßàÏùò Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")